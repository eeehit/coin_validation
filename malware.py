import re
import string
import urllib.request


def strings(filename, min=20):
    with open(filename, errors="ignore") as f:  # Python 3.x
        result = ""
        for c in f.read():
            if c in string.printable:
                result += c
                continue
            if len(result) >= min:
                yield result
            result = ""
        if len(result) >= min:  # catch result at EOF
            yield result


sl = list(strings("C:\\Users\\trinity\\Downloads\\clipboard_sample(14ê°œ)\\jongbin"
                  "\\00E3BCFD0EF917C73C5A3818DAF5BC0271FB3DA53817DF1215C20BFA5E4E91DA"))

coin_pattern = {
    'btc': {
        'regex': re.compile(r"^(?:[13][a-km-zA-HJ-NP-Z1-9]{25,34})$"),
        'core': 'https://btc.com/%s'
    },
    'eth': {
        'regex': re.compile(r"^0x[a-fA-F0-9]{40}$"),
        'core': 'https://btc.com/%s'
    },
    'xrp': {
        'regex': re.compile(r"^r[0-9a-zA-Z]{33}$"),
        'core': 'https://btc.com/%s'
    },
    'bch': {
        'regex': re.compile(r"^[13][a-km-zA-HJ-NP-Z1-9]{33}$"),
        'core': 'https://btc.com/%s'
    },
    'xmr': {
        'regex': re.compile(r"^4[0-9AB][1-9A-HJ-NP-Za-km-z]{93}$"),
        'core': 'https://btc.com/%s'
    },
    'dash': {
        'regex': re.compile(r"^X[1-9A-HJ-NP-Za-km-z]{33}$"),
        'core': 'https://btc.com/%s'
    },
    'ltc': {
        'regex': re.compile(r"^[LM3][a-km-zA-HJ-NP-Z1-9]{26,33}$"),
        'core': 'https://btc.com/%s'
    },
    'neo': {
        'regex': re.compile(r"^A[0-9a-zA-Z]{33}$"),
        'core': 'https://btc.com/%s'
    },
    'doge': {
        'regex': re.compile(r"^D{1}[5-9A-HJ-NP-U]{1}[1-9A-HJ-NP-Za-km-z]{32}$"),
        'core': 'https://btc.com/%s'
    },
    'cure': {
        'regex': re.compile(r"^B[a-km-zA-HJ-NP-Z0-9]{33}$"),
        'core': 'https://btc.com/%s'
    },
    'ppc': {
        'regex': re.compile(r"^P[a-km-zA-HJ-NP-Z0-9]{33}$"),
        'core': 'https://btc.com/%s'
    },
    'zec': {
        'regex': re.compile(r"^t[a-km-zA-HJ-NP-Z0-9]{34}$"),
        'core': 'https://btc.com/%s'
    },
}
for s in sl:
    for k in coin_pattern.keys():
        # step 1 : reg validation
        if coin_pattern.get(k)['regex'].search(s):
            print('%s: %s' % (k, s))

            # step 2 : core validation
            '''
            req = urllib.request.Request(coin_pattern.get(k)['core'] % s)
            f = urllib.request.urlopen(req)
            print(f.read())
            '''

